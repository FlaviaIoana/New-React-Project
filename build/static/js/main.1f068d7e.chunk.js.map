{"version":3,"sources":["helpers.js","components/Square.js","components/Board.js","components/Game.js","components/Nav.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","value","Square","onClick","winner","style","background","border","fontSize","fontWeight","cursor","outline","borderRadius","width","height","margin","display","gridTemplateColumns","marginTop","Board","map","square","key","styles","Game","useState","Array","fill","board","setBoard","xIsNext","setXisNext","boardCopy","textDecoration","Nav","className","to","NameForm","props","myChangeHandler","event","nam","target","name","val","setState","onClickk","document","getElementById","innerHTML","state","firstname","lastname","email","subject","textarea","type","onChange","this","id","React","Component","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAAO,SAASA,EAAgBC,GAc5B,IAVA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIN,EAAQI,GAAGG,OAASP,EAAQI,GAAGG,QAAUP,EAAQK,GAAGE,OAASP,EAAQI,GAAGG,QAAUP,EAAQM,GAAGC,MAK/F,OAAOP,EAAQI,GAAGG,MAGtB,OAAO,EAET,ICNaC,EAfA,SAAC,GAAD,IAAED,EAAF,EAAEA,MAAOE,EAAT,EAASA,QAASC,EAAlB,EAAkBA,OAAlB,OACf,4BAAQC,MAAO,CACXC,WAAYF,EAAS,SAAW,YAChCG,OAAQ,qBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QAGZR,QAASA,GACLF,ICbCI,EAAM,CACRE,OAAQ,iBACRK,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,oBAAqB,kBACrBC,UAAW,QAYAC,EATD,SAAC,GAAD,IAAEzB,EAAF,EAAEA,QAASS,EAAX,EAAWA,QAAX,OACT,yBAAKE,MAAOA,GACPX,EAAQ0B,KAAI,SAACC,EAAOzB,GAAR,OACT,kBAAC,EAAD,CAAQ0B,IAAK1B,EAAGK,MAAOoB,EAAOpB,MAAOE,QAAS,kBAAMA,EAAQP,IAAIQ,OAAQiB,EAAOjB,cCbtFmB,EAAO,CACTV,MAAO,QACPE,OAAQ,aAwCGS,EArCF,WAAO,IAAD,EACWC,mBAASC,MAAM,GAAGC,KAAK,CAAC1B,MAAO,GAAIG,QAAQ,KADtD,mBACRwB,EADQ,KACDC,EADC,OAEeJ,oBAAS,GAFxB,mBAERK,EAFQ,KAECC,EAFD,KAGX3B,EAAQX,EAAgBmC,GAuBhC,OACI,oCACA,kBAAC,EAAD,CAAOlC,QAASkC,EAAOzB,QAtBH,SAAAP,GAChB,IAAMoC,EAAU,YAAKJ,GACrB,IAAII,EAAUpC,GAAGK,QAASG,EAG1B,GAFA4B,EAAUpC,GAAIkC,EAAU,CAAC7B,MAAO,IAAKG,OAAQ,SAAW,CAACH,MAAO,IAAKG,OAAQ,SAC7EA,EAAQX,EAAgBmC,GAGpB,IAAK,IAAIhC,EAAE,EAAEA,EAAGoC,EAAUnC,OAAQD,IAC9BoC,EAAUpC,GAAG,CAACQ,OAAQ,aAI9ByB,EAASG,GACTD,GAAYD,MAUhB,yBAAKzB,MAAOkB,GACR,2BAAInB,EAAS,8BAA+BA,EAAS,iBAAmB0B,EAAS,IAAM,MANvF,4BAAQ3B,QAAS,kBAAM0B,EAASH,MAAM,GAAGC,KAAK,CAAC1B,MAAO,GAAIG,QAAQ,OAAlE,cAKJ,OCpCEC,EAAQ,CACV4B,eAAgB,QAGPC,EAAM,kBACX,6BACI,wBAAIC,UAAU,aACV,qCACA,mCACA,kBAAC,IAAD,CAAMC,GAAG,QAAQ/B,MAAOA,GACxB,2CAEA,kBAAC,IAAD,CAAM+B,GAAG,QAAQ/B,MAAOA,GACxB,wC,wCCwCDgC,E,kDAlDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAIRC,gBAAkB,SAACC,GACjB,IAAIC,EAAMD,EAAME,OAAOC,KACnBC,EAAMJ,EAAME,OAAOzC,MACvB,EAAK4C,SAAL,eAAgBJ,EAAMG,KARP,EAUjBE,SAAW,WACPC,SAASC,eAAe,eAAeC,UAAU,EAAKC,MAAMC,UAAW,EAAKD,MAAME,SAAW,EAAKF,MAAMG,MAAM,EAAKH,MAAMI,QAAQ,EAAKJ,MAAMK,UAT9I,EAAKL,MAAQ,GAFE,E,qDAaP,IAAD,OACP,OACE,8BACA,qDACA,2BACEM,KAAK,OACLb,KAAK,YACLc,SAAUC,KAAKnB,kBAEjB,oDAEA,2BACEiB,KAAK,OACLb,KAAK,WACLc,SAAUC,KAAKnB,kBAEhB,gDACD,2BACEiB,KAAK,QACLb,KAAK,QACLc,SAAUC,KAAKnB,kBAEhB,kDACD,4BAAQI,KAAK,UAAU1C,MAAOyD,KAAKR,MAAMI,QAASG,SAAUC,KAAKnB,iBACnE,4BAAQtC,MAAM,OAAd,OACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,SAAd,UAEF,8DACA,8BAAU0C,KAAK,WAAW1C,MAAOyD,KAAKR,MAAMK,SAAUE,SAAUC,KAAKnB,kBACjE,2BACA,4BAAQpC,QAAS,kBAAM,EAAK2C,aAA5B,SACA,uBAAIa,GAAG,qB,GA9CMC,IAAMC,WCiBdC,EAdH,kBAER,kBAAC,IAAD,KACI,yBAAK3B,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO4B,KAAK,QAAQC,UAAWxC,IAC/B,kBAAC,IAAD,CAAOuC,KAAK,QAAQC,UAAW3B,QCF3B4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAASC,eAAe,SDyHpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f068d7e.chunk.js","sourcesContent":["export function calculateWinner(squares) {\r\n  // const style={\r\n  //   backgroundColor: 'red'\r\n  // }\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a].value && squares[a].value === squares[b].value && squares[a].value === squares[c].value) {\r\n        // console.log(squares[b].value);\r\n        // console.log(lines[i]);\r\n        // squares[a].style.color=\"yellow\";\r\n        // lines[i].style={style};\r\n        return squares[a].value;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  const squares=[\r\n    null, null, null,\r\n    'x','x','x',\r\n    null, null, null\r\n  ];\r\n  // console.log(calculateWinner(squares));","import React from 'react';\r\n// import {calculateWinner as winner} from '../helpers';\r\n\r\n\r\n\r\nconst Square = ({value, onClick, winner}) => (\r\n<button style={{\r\n    background: winner ? 'yellow' : 'lightblue',\r\n    border: '2px solid darkblue',\r\n    fontSize: '30px',\r\n    fontWeight: '800',\r\n    cursor: 'pointer',\r\n    outline: 'none'\r\n}}\r\n//  [style.backgroundColor]=\"winner ? 'blue' :'yellow'\" \r\n onClick={onClick}>\r\n    {value}\r\n</button>\r\n);\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './Square'\r\n\r\nconst style={\r\n    border: '4px solid blue',\r\n    borderRadius: '10px',\r\n    width: '250px',\r\n    height: '250px',\r\n    margin: '0 auto',\r\n    display: 'grid',\r\n    gridTemplateColumns: 'repeat(3, auto)',\r\n    marginTop: '50px'\r\n}\r\n\r\nconst Board = ({squares, onClick}) => (\r\n     <div style={style}>\r\n         {squares.map((square,i) => (\r\n             <Square key={i} value={square.value} onClick={() => onClick(i)} winner={square.winner}/>\r\n         ))}\r\n         {/* <Square value=\"1\" onClick={() => onClick(\"dummy value\")} /> */}\r\n     </div>\r\n)\r\n\r\nexport default Board;","import React, {useState} from 'react';\r\nimport {calculateWinner} from '../helpers';\r\nimport Board from './Board';\r\n\r\nconst styles={\r\n    width: '200px',\r\n    margin: '20px auto'\r\n}\r\n\r\nconst Game = () => {\r\n    const [board, setBoard] = useState(Array(9).fill({value: '', winner: false}));\r\n    const [xIsNext, setXisNext] = useState(true);\r\n    let winner= calculateWinner(board);\r\n\r\n\r\n    const handleClick = i => {\r\n        const boardCopy= [...board];\r\n        if (boardCopy[i].value || winner) return;\r\n        boardCopy[i]= xIsNext ? {value: 'X', winner: 'false'} : {value: '0', winner: 'false'};\r\n        winner= calculateWinner(board)\r\n        if(winner) {\r\n            // boardCopy.forEach(element => element.winner = true);\r\n            for (let i=0;i< boardCopy.length; i++){\r\n                boardCopy[i]={winner: 'true'};\r\n            }\r\n            return;\r\n        }\r\n        setBoard(boardCopy);\r\n        setXisNext(!xIsNext);\r\n        \r\n    }\r\n\r\n    const renderMoves = () => (\r\n        <button onClick={() => setBoard(Array(9).fill({value: '', winner: false}))}>Start game</button>\r\n    )\r\nreturn (\r\n    <>\r\n    <Board squares={board} onClick={handleClick} />\r\n    <div style={styles}>\r\n        <p>{winner ? 'CONGRATULATIONS!!! Winner: '+ winner : 'Next player: ' + (xIsNext? 'X' : 'O')}</p>\r\n        {renderMoves()};\r\n    </div>\r\n    </>\r\n)\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nconst style = {\r\n    textDecoration: 'none'\r\n};\r\n\r\nexport const Nav = () => (\r\n        <nav>\r\n            <ul className=\"nav-links\">\r\n                <li>Tasks</li>\r\n                <li>FAQ</li>\r\n                <Link to=\"/form\" style={style}>\r\n                <li>Contact us</li>\r\n                </Link>\r\n                <Link to=\"/game\" style={style}>\r\n                <li>Game</li>\r\n                </Link>\r\n            </ul>\r\n        </nav>\r\n);","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport {SingleInput} from './SingleInput'\r\n\r\nclass NameForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n      }\r\n      myChangeHandler = (event) => {\r\n        let nam = event.target.name;\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n      }\r\n      onClickk = () => {\r\n          document.getElementById(\"formDetails\").innerHTML=this.state.firstname+ this.state.lastname + this.state.email+this.state.subject+this.state.textarea;\r\n      }\r\n      render() {\r\n        return (\r\n          <form>\r\n          <p>Enter your first name:</p>\r\n          <input\r\n            type='text'\r\n            name=\"firstname\"\r\n            onChange={this.myChangeHandler}\r\n          />\r\n          <p>Enter your last name:</p>\r\n            {/* <SingleInput name='lastname' onChange={this.myChangeHandler}></SingleInput> */}\r\n          <input\r\n            type='text'\r\n            name='lastname'\r\n            onChange={this.myChangeHandler}\r\n          />\r\n           <p>Enter your email:</p>\r\n          <input\r\n            type='email'\r\n            name='email'\r\n            onChange={this.myChangeHandler}\r\n          />\r\n           <p>Choose the subject:</p>\r\n          <select name='subject' value={this.state.subject} onChange={this.myChangeHandler}>\r\n        <option value=\"bug\">Bug</option>\r\n        <option value=\"question\">Question</option>\r\n        <option value=\"other\">Other</option>\r\n      </select>\r\n      <p>Please write your message here:</p>\r\n      <textarea name=\"textarea\" value={this.state.textarea} onChange={this.myChangeHandler}/>\r\n          <p>\r\n          <button onClick={() => this.onClickk()}>Send</button></p>\r\n          <p  id=\"formDetails\"></p>\r\n          </form>\r\n        );\r\n      }\r\n  }\r\nexport default NameForm;","import React from 'react';\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\nimport './App.css';\nimport Game from './components/Game'\nimport { Nav } from './components/Nav'\nimport NameForm from './components/Input'\n\nconst App = () => (\n\n    <Router>\n        <div className=\"App\">\n            <Nav />\n            <Switch>\n                <Route path=\"/game\" component={Game} />\n                <Route path=\"/form\" component={NameForm} />\n            </Switch>\n        </div>\n    </Router>\n\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}